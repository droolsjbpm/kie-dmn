/*
 * Copyright 2016 Red Hat, Inc. and/or its affiliates.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
*/

package org.kie.dmn.validator;

import org.kie.dmn.feel.model.v1_1.*;

rule ITEMDEF_NOT_UNIQUE
when
  $x : ItemDefinition()
  $y : ItemDefinition( name == $x.name, this != $x )
then
  entryPoints["PROBLEMS"].insert( new Problem( $x, P.ITEMDEF_NOT_UNIQUE ) );
end

/** Not sure if this rule is really needed being a possible subset of ITEMDEF_NOT_UNIQUE */
rule ITEMCOMP_DUPLICATED
when
  $ic1 : ItemDefinition( parent instanceof ItemDefinition )
  $ic2 : ItemDefinition( name == $ic1.name, parent == $ic1.parent, this != $ic1 )
then
  entryPoints["PROBLEMS"].insert( new Problem( $ic1, P.ITEMCOMP_DUPLICATED ) );
end

rule DECISION_MISSING_VAR
when
    $d : Decision()
    not( Decision( /variable{name == $d.name}, this == $d ) )
then
    entryPoints["PROBLEMS"].insert( new Problem( $d, P.DECISION_MISSING_VAR ) );
end

rule DECISION_MISSING_EXPR
when
    $d : Decision( expression == null )
then
    entryPoints["PROBLEMS"].insert( new Problem( $d, P.DECISION_MISSING_EXPR ) );
end

rule BKM_MISSING_VAR
when
    $d : BusinessKnowledgeModel()
    not( BusinessKnowledgeModel( /variable{name == $d.name}, this == $d ) )
then
    entryPoints["PROBLEMS"].insert( new Problem( $d, P.BKM_MISSING_VAR ) );
end

rule BKM_MISSING_EXPR
when
    $d : BusinessKnowledgeModel( encapsulatedLogic == null || encapsulatedLogic.expression == null )
then
    entryPoints["PROBLEMS"].insert( new Problem( $d, P.BKM_MISSING_EXPR ) );
end

rule FORMAL_PARAM_DUPLICATED
when
    $fp1 : InformationItem( parent instanceof FunctionDefinition )
    $fp2 : InformationItem( name == $fp1.name, parent == $fp1.parent, this != $fp1 )
then
    entryPoints["PROBLEMS"].insert( new Problem( $fp1, P.FORMAL_PARAM_DUPLICATED ) );
end

rule DRGELEM_NOT_UNIQUE
when
  $x : DRGElement()
  $y : DRGElement( name == $x.name, this != $x )
then
  entryPoints["PROBLEMS"].insert( new Problem( $x, P.DRGELEM_NOT_UNIQUE ) );
end

rule INPUTDATA_MISSING_VAR
when
    $id : InputData()
    not( InputData( /variable{name == $id.name}, this == $id ) )
then
    entryPoints["PROBLEMS"].insert( new Problem( $id, P.INPUTDATA_MISSING_VAR ) );
end

rule INVOCATION_MISSING_TARGET
when
    $inv : Invocation( $targetName : expression#LiteralExpression.text )
    not( DRGElement( name == $targetName ) )  
then
    entryPoints["PROBLEMS"].insert( new Problem( $inv, P.INVOCATION_MISSING_TARGET ) );
end

rule INVOCATION_WRONG_PARAM_COUNT
when
    $inv : Invocation( $targetName : expression#LiteralExpression.text )
    BusinessKnowledgeModel( name == $targetName, encapsulatedLogic.formalParameter.size != $inv.binding.size ) 
then
    entryPoints["PROBLEMS"].insert( new Problem( $inv, P.INVOCATION_WRONG_PARAM_COUNT ) );
end

// The parameter names in the Binding elements SHALL be a subset of the formalParameters of the calledFunction.
rule INVOCATION_INCONSISTENT_PARAM_NAMES
when
    $inv : Invocation( $targetName : expression#LiteralExpression.text )
    $target : BusinessKnowledgeModel( name == $targetName )
    accumulate ( Binding($s : parameter.name) from $inv.binding ; 
                 $names : collectSet($s)  ) 
    accumulate ( InformationItem($ts : name) from $target.encapsulatedLogic.formalParameter ; 
                 $targetNames : collectSet($ts) ;
                 ! $targetNames.containsAll($names) ) 
then
    entryPoints["PROBLEMS"].insert( new Problem( $inv, P.INVOCATION_INCONSISTENT_PARAM_NAMES ) );
end

rule CONTEXT_DUP_ENTRY
when
  $ce1 : ContextEntry( parent instanceof Context )
  $ce2 : ContextEntry( variable!.name == $ce1.variable!.name, parent == $ce1.parent, this != $ce1 )
then
  entryPoints["PROBLEMS"].insert( new Problem( $ce1, P.CONTEXT_DUP_ENTRY ) );
end

rule CONTEXT_ENTRY_NOTYPEREF
when
  $ce1 : ContextEntry( variable != null, variable.typeRef == null )
then
  entryPoints["PROBLEMS"].insert( new Problem( $ce1, P.CONTEXT_ENTRY_NOTYPEREF ) );
end

rule RELATION_DUP_COLUMN
when
  $c1 : InformationItem( parent instanceof Relation )
  $c2 : InformationItem( name == $c1.name, parent == $c1.parent, this != $c1 )
then
  entryPoints["PROBLEMS"].insert( new Problem( $c1, P.RELATION_DUP_COLUMN ) );
end

rule RELATION_ROW_CELL_NOTLITERAL
when
  $e : Expression( parent instanceof org.kie.dmn.feel.model.v1_1.List, parent.parent instanceof Relation, ! (this instanceof LiteralExpression) )
then
  entryPoints["PROBLEMS"].insert( new Problem( $e, P.RELATION_ROW_CELL_NOTLITERAL ) );
end

rule RELATION_ROW_CELLCOUNTMISMATCH
when
  $row : org.kie.dmn.feel.model.v1_1.List( parent instanceof Relation, expression.size != parent.column.size )
then
  entryPoints["PROBLEMS"].insert( new Problem( $row, P.RELATION_ROW_CELLCOUNTMISMATCH ) );
end

rule DTABLE_SINGLEOUT_NONAME
when
  $oc : OutputClause( parent instanceof DecisionTable, parent.output.size == 1, this.name != null )
then
  entryPoints["PROBLEMS"].insert( new Problem( $oc, P.DTABLE_SINGLEOUT_NONAME ) );
end

rule DTABLE_SINGLEOUT_TYPEREF
when
  $oc : OutputClause( parent instanceof DecisionTable, parent.output.size == 1, this.typeRef != null )
then
  entryPoints["PROBLEMS"].insert( new Problem( $oc, P.DTABLE_SINGLEOUT_NOTYPEREF ) );
end

rule DTABLE_MULTIPLEOUT_NAME
when
  $oc : OutputClause( parent instanceof DecisionTable, parent.output.size > 1, this.name == null )
then
  entryPoints["PROBLEMS"].insert( new Problem( $oc, P.DTABLE_MULTIPLEOUT_NAME ) );
end

rule DTABLE_MULTIPLEOUT_TYPEREF
when
  $oc : OutputClause( parent instanceof DecisionTable, parent.output.size > 1, this.typeRef == null )
then
  entryPoints["PROBLEMS"].insert( new Problem( $oc, P.DTABLE_MULTIPLEOUT_TYPEREF ) );
end

rule DTABLE_PRIORITY_MISSING_OUTVALS
when
  $oc : OutputClause( parent instanceof DecisionTable, parent#DecisionTable.hitPolicy == HitPolicy.PRIORITY, outputValues == null )
then
  entryPoints["PROBLEMS"].insert( new Problem( $oc, P.DTABLE_PRIORITY_MISSING_OUTVALS ) );
end



rule problems
when
  $p: Object() from entry-point "PROBLEMS"
then
  System.err.println($p);
end

rule Rsysoutdebug
when
  $x : DMNModelInstrumentedBase()
then
  System.out.println($x);
end